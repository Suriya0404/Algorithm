# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

"""
For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5
"""


class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        found = False
        previous = None

        if head is None:
            return []

        while head.next is not None:
            print(head.val)
            if head.val == k:
                found = True

            if not found:
                new = ListNode(head.val)
                new.next = previous
                previous = ListNode(head.next.val)
            else:
                new2 = ListNode(head.val)
                new2.next = ListNode(head.next)

            head = head.next

        new.next = new2

        return new

